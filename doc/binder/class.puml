@startuml

namespace frameworks.base.core{

    namespace java{

        namespace android.os{
            class ServiceManager

            class ServiceManagerNative

            class ServiceManagerProxy{
                - IBinder mRemote
                - IServiceManager mServiceManager
            }

            interface IBinder{
                IInterface queryLocalInterface(String descriptor)
                boolean transact(int code, Parcel data, Parcel reply, int flags)
            }

            class Binder implements IBinder

            class BinderProxy implements IBinder{
                native boolean transactNative(int code, Parcel data, Parcel reply, int flags)
            }

            ServiceManagerNative +-- ServiceManagerProxy
            ServiceManagerProxy -> IBinder
            IBinder -> frameworks.native.libs.binder.BpBinder
        }

        namespace com.android.internal.os{
            class BinderInternal{
                {static} native IBinder getContextObject()
            }
        }
    }

    namespace jni{
        class android_util_Binder<<cpp>>{
            {static} jobject android_os_BinderInternal_getContextObject(JNIEnv* env, jobject clazz)
            {static} jboolean android_os_BinderProxy_transact(JNIEnv* env, jobject obj, jint code, jobject dataObj, jobject replyObj, jint flags)
        }
    }
}

namespace system.core.libutils.include.utils{
    interface RefBase<<h>>
}

namespace frameworks.native.libs.binder{

    namespace include.binder{

        interface ProcessState{
            int                 mDriverFD
            Vector<handle_entry>mHandleToObject

            {static}  sp<ProcessState>    self()
            {static}  sp<ProcessState>    initWithDriver(const char *driver)
            sp<IBinder>         getContextObject(const sp<IBinder>& caller)
            bool                becomeContextManager(context_check_func checkFunc, void* userData)
            sp<IBinder>         getStrongProxyForHandle(int32_t handle)
        }

        class handle_entry<<struct>>{
            IBinder* binder;
            RefBase::weakref_type* refs;
        }

        interface IPCThreadState{
            const   sp<ProcessState>    mProcess
            Parcel              mIn
            Parcel              mOut

            {static}  IPCThreadState*     self()
            status_t transact(int32_t handle, uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags)
        }

        interface IBinder<<h>> extends system.core.libutils.include.utils.RefBase
        interface BpBinder<<h>> extends IBinder{
             {static} BpBinder*    create(int32_t handle)
        }
    }

    class BpBinder<<cpp>> implements include.binder.BpBinder
    class ProcessState<<cpp>> implements include.binder.ProcessState
    class IPCThreadState<<cpp>> implements include.binder.IPCThreadState
}

@enduml